// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowDartGame.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CalculatorFeature : object, Xunit.IClassFixture<CalculatorFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Calculator.feature"
#line hidden
        
        public CalculatorFeature(CalculatorFeature.FixtureData fixtureData, SpecFlowDartGame_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Calculator", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Play a game")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculator")]
        [Xunit.TraitAttribute("Description", "Play a game")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void PlayAGame()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Play a game", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("the game mode is \'501\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table1.AddRow(new string[] {
                            "20",
                            "3"});
                table1.AddRow(new string[] {
                            "20",
                            "3"});
                table1.AddRow(new string[] {
                            "20",
                            "3"});
#line 6
 testRunner.And("player 1 to play", ((string)(null)), table1, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table2.AddRow(new string[] {
                            "15",
                            "2"});
                table2.AddRow(new string[] {
                            "0",
                            "1"});
                table2.AddRow(new string[] {
                            "25",
                            "2"});
#line 11
 testRunner.And("player 2 to play", ((string)(null)), table2, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table3.AddRow(new string[] {
                            "20",
                            "3"});
                table3.AddRow(new string[] {
                            "20",
                            "3"});
                table3.AddRow(new string[] {
                            "20",
                            "3"});
#line 16
 testRunner.And("player 1 to play", ((string)(null)), table3, "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table4.AddRow(new string[] {
                            "15",
                            "2"});
                table4.AddRow(new string[] {
                            "20",
                            "2"});
                table4.AddRow(new string[] {
                            "25",
                            "2"});
#line 21
 testRunner.And("player 2 to play", ((string)(null)), table4, "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table5.AddRow(new string[] {
                            "20",
                            "3"});
                table5.AddRow(new string[] {
                            "19",
                            "3"});
                table5.AddRow(new string[] {
                            "12",
                            "2"});
#line 26
 testRunner.And("player 1 to play", ((string)(null)), table5, "And ");
#line hidden
#line 31
 testRunner.When("the game is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then("the winner should be the player 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Area does not exist")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculator")]
        [Xunit.TraitAttribute("Description", "Area does not exist")]
        public virtual void AreaDoesNotExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Area does not exist", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
 testRunner.Given("the game mode is \'501\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table6.AddRow(new string[] {
                            "30",
                            "3"});
#line 36
 testRunner.And("player 1 to play", ((string)(null)), table6, "And ");
#line hidden
#line 39
 testRunner.Then("the error \'Invalid area\' should be raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Invalid multiplier")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculator")]
        [Xunit.TraitAttribute("Description", "Invalid multiplier")]
        public virtual void InvalidMultiplier()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid multiplier", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
 testRunner.Given("the game mode is \'501\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table7.AddRow(new string[] {
                            "25",
                            "3"});
#line 43
 testRunner.And("player 1 to play", ((string)(null)), table7, "And ");
#line hidden
#line 46
 testRunner.Then("the error \'Invalid multiplier\' should be raised", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player 2 will win because player 1 busted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculator")]
        [Xunit.TraitAttribute("Description", "Player 2 will win because player 1 busted")]
        public virtual void Player2WillWinBecausePlayer1Busted()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player 2 will win because player 1 busted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
 testRunner.Given("the game mode is \'501\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table8.AddRow(new string[] {
                            "20",
                            "3"});
                table8.AddRow(new string[] {
                            "20",
                            "3"});
                table8.AddRow(new string[] {
                            "20",
                            "3"});
#line 50
 testRunner.And("player 1 to play", ((string)(null)), table8, "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table9.AddRow(new string[] {
                            "20",
                            "3"});
                table9.AddRow(new string[] {
                            "20",
                            "3"});
                table9.AddRow(new string[] {
                            "20",
                            "3"});
#line 55
 testRunner.And("player 2 to play", ((string)(null)), table9, "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table10.AddRow(new string[] {
                            "20",
                            "3"});
                table10.AddRow(new string[] {
                            "20",
                            "3"});
                table10.AddRow(new string[] {
                            "20",
                            "3"});
#line 60
 testRunner.And("player 1 to play", ((string)(null)), table10, "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table11.AddRow(new string[] {
                            "20",
                            "3"});
                table11.AddRow(new string[] {
                            "19",
                            "3"});
                table11.AddRow(new string[] {
                            "12",
                            "2"});
#line 65
 testRunner.And("player 2 to play", ((string)(null)), table11, "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table12.AddRow(new string[] {
                            "20",
                            "3"});
                table12.AddRow(new string[] {
                            "19",
                            "3"});
                table12.AddRow(new string[] {
                            "14",
                            "2"});
#line 70
 testRunner.And("player 1 to play", ((string)(null)), table12, "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table13.AddRow(new string[] {
                            "20",
                            "3"});
                table13.AddRow(new string[] {
                            "20",
                            "3"});
                table13.AddRow(new string[] {
                            "20",
                            "3"});
#line 75
 testRunner.And("player 2 to play", ((string)(null)), table13, "And ");
#line hidden
#line 80
 testRunner.When("the game is finished", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
 testRunner.Then("the winner should be the player 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player 1 busted")]
        [Xunit.TraitAttribute("FeatureTitle", "Calculator")]
        [Xunit.TraitAttribute("Description", "Player 1 busted")]
        public virtual void Player1Busted()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player 1 busted", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 84
 testRunner.Given("the game mode is \'501\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table14.AddRow(new string[] {
                            "20",
                            "3"});
                table14.AddRow(new string[] {
                            "20",
                            "3"});
                table14.AddRow(new string[] {
                            "20",
                            "3"});
#line 85
 testRunner.And("player 1 to play", ((string)(null)), table14, "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table15.AddRow(new string[] {
                            "20",
                            "3"});
                table15.AddRow(new string[] {
                            "20",
                            "3"});
                table15.AddRow(new string[] {
                            "20",
                            "3"});
#line 90
 testRunner.And("player 1 to play", ((string)(null)), table15, "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Multiplier"});
                table16.AddRow(new string[] {
                            "20",
                            "3"});
                table16.AddRow(new string[] {
                            "20",
                            "3"});
                table16.AddRow(new string[] {
                            "20",
                            "3"});
#line 95
 testRunner.And("player 1 to play", ((string)(null)), table16, "And ");
#line hidden
#line 100
 testRunner.Then("the player 1 should need 141 points to end the game", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CalculatorFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CalculatorFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
